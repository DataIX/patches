# HG changeset patch
# Parent 34ad7f14b04839ec93567d59985d97809e400dba
pam_ssh_nullok fix.

Date: Tue, 15 Nov 2011 22:12:46 +0100
From: Dag-Erling Sm\xf8rgrav <des@des.no>
To: Guy Helmer <guy.helmer@palisadesystems.com>
Cc: freebsd-security@freebsd.org
Subject: Re: Possible pam_ssh bug?

It turns out that this goes all the way to OpenSSL, which ignores the
passphrase if the key is not encrypted.  The only solution I can think
of - more of a workaround, really - is to first try to load the key with
an empty passphrase, and skip the key if that worked.  See the attached
(untested) patch.

A more advanced patch would load all keys but require at least one of
them to have a passphrase.

diff -r 34ad7f14b048 lib/libpam/modules/pam_ssh/pam_ssh.c
--- a/lib/libpam/modules/pam_ssh/pam_ssh.c
+++ b/lib/libpam/modules/pam_ssh/pam_ssh.c
@@ -91,7 +91,8 @@
  * struct pam_ssh_key containing the key and its comment.
  */
 static struct pam_ssh_key *
-pam_ssh_load_key(const char *dir, const char *kfn, const char *passphrase)
+pam_ssh_load_key(const char *dir, const char *kfn, const char *passphrase,
+    int nullok)
 {
 	struct pam_ssh_key *psk;
 	char fn[PATH_MAX];
@@ -101,6 +102,21 @@
 	if (snprintf(fn, sizeof(fn), "%s/%s", dir, kfn) > (int)sizeof(fn))
 		return (NULL);
 	comment = NULL;
+	if (!nullok) {
+		/*
+		 * If the key is unencrypted, OpenSSL ignores the
+		 * passphrase, so it will seem like the user typed in the
+		 * right one.  This allows a user to circumvent nullok by
+		 * providing a dummy passphrase.  Verify that the key
+		 * really *is* encrypted by trying to load it with an
+		 * empty passphrase.
+		 */
+		key = key_load_private(fn, "", &comment);
+		if (key != NULL) {
+			key_free(key);
+			return (NULL);
+		}
+	}
 	key = key_load_private(fn, passphrase, &comment);
 	if (key == NULL) {
 		openpam_log(PAM_LOG_DEBUG, "failed to load key from %s\n", fn);
@@ -178,7 +194,7 @@
 
 	/* try to load keys from all keyfiles we know of */
 	for (kfn = pam_ssh_keyfiles; *kfn != NULL; ++kfn) {
-		psk = pam_ssh_load_key(pwd->pw_dir, *kfn, passphrase);
+		psk = pam_ssh_load_key(pwd->pw_dir, *kfn, passphrase, nullok);
 		if (psk != NULL) {
 			pam_set_data(pamh, *kfn, psk, pam_ssh_free_key);
 			++nkeys;
