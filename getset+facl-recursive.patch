# HG changeset patch
# Parent 5e8b115d9286ad1566043bc53240a4d9487a92be
PR/155163 getfacl(1) setfacl(1) Recursive Functions

diff -r 5e8b115d9286 bin/getfacl/getfacl.c
--- a/bin/getfacl/getfacl.c
+++ b/bin/getfacl/getfacl.c
@@ -47,6 +47,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
+#include <dirent.h>
 
 int	more_than_one = 0;
 
@@ -260,8 +261,56 @@
 }
 
 static int
+recurse_directory(char *path, acl_type_t type, int hflag, int iflag,
+    int nflag, int qflag, int vflag, int rflag)
+{
+	DIR *dirp;
+	struct dirent *ent;
+	struct stat sb;
+	char newpath[PATH_MAX+1];
+	int	carried_error = 0, error;
+	
+	if (stat(path, &sb) == -1) {
+		warn("%s: stat() failed", path);
+		return -1;
+	}
+	
+	error = print_acl(path, type, hflag, iflag, nflag, qflag, vflag);
+	
+	if (rflag == 0 || S_ISDIR(sb.st_mode) == 0)
+		return error;
+	
+	if (error == -1)
+		carried_error = -1;
+	
+	dirp = opendir(path);
+	while ((ent = readdir(dirp)) != NULL) {
+		if (strcmp(ent->d_name, ".") == 0 || strcmp(ent->d_name, "..") == 0)
+			continue;
+		
+		snprintf(newpath, PATH_MAX, "%s/%s", path, ent->d_name); 
+		
+		if (stat(newpath, &sb) == -1) {
+			warn("%s: stat() failed", newpath);
+			continue;
+		}
+		
+		if (S_ISDIR(sb.st_mode))
+			error = recurse_directory(newpath, type, hflag, iflag,
+			    nflag, qflag, vflag, rflag);
+		else
+			error = print_acl(newpath, type, hflag, iflag, nflag, qflag, vflag);
+		if (error == -1)
+			carried_error = -1;
+	}
+	closedir(dirp);
+	
+	return carried_error;
+}
+
+static int
 print_acl_from_stdin(acl_type_t type, int hflag, int iflag, int nflag,
-    int qflag, int vflag)
+    int qflag, int vflag, int rflag)
 {
 	char	*p, pathname[PATH_MAX];
 	int	carried_error = 0;
@@ -269,8 +318,8 @@
 	while (fgets(pathname, (int)sizeof(pathname), stdin)) {
 		if ((p = strchr(pathname, '\n')) != NULL)
 			*p = '\0';
-		if (print_acl(pathname, type, hflag, iflag, nflag,
-		    qflag, vflag) == -1) {
+		if (recurse_directory(pathname, type, hflag, iflag, nflag,
+		    qflag, vflag, rflag) == -1) {
 			carried_error = -1;
 		}
 	}
@@ -284,14 +333,15 @@
 	acl_type_t	type = ACL_TYPE_ACCESS;
 	int	carried_error = 0;
 	int	ch, error, i;
-	int	hflag, iflag, qflag, nflag, vflag;
+	int	hflag, iflag, qflag, nflag, vflag, rflag;
 
 	hflag = 0;
 	iflag = 0;
 	qflag = 0;
 	nflag = 0;
 	vflag = 0;
-	while ((ch = getopt(argc, argv, "dhinqv")) != -1)
+	rflag = 0;
+	while ((ch = getopt(argc, argv, "Rdhinqv")) != -1)
 		switch(ch) {
 		case 'd':
 			type = ACL_TYPE_DEFAULT;
@@ -311,6 +361,9 @@
 		case 'v':
 			vflag = 1;
 			break;
+		case 'R':
+			rflag = 1;
+			break;
 		default:
 			usage();
 			return(-1);
@@ -320,19 +373,19 @@
 
 	if (argc == 0) {
 		error = print_acl_from_stdin(type, hflag, iflag, nflag,
-		    qflag, vflag);
+		    qflag, vflag, rflag);
 		return(error ? 1 : 0);
 	}
 
 	for (i = 0; i < argc; i++) {
 		if (!strcmp(argv[i], "-")) {
 			error = print_acl_from_stdin(type, hflag, iflag, nflag,
-			    qflag, vflag);
+			    qflag, vflag, rflag);
 			if (error == -1)
 				carried_error = -1;
 		} else {
-			error = print_acl(argv[i], type, hflag, iflag, nflag,
-			    qflag, vflag);
+			error = recurse_directory(argv[i], type, hflag, iflag, nflag,
+			    qflag, vflag, rflag);
 			if (error == -1)
 				carried_error = -1;
 		}
diff -r 5e8b115d9286 bin/setfacl/setfacl.c
--- a/bin/setfacl/setfacl.c
+++ b/bin/setfacl/setfacl.c
@@ -32,6 +32,8 @@
 #include <sys/stat.h>
 #include <sys/acl.h>
 #include <sys/queue.h>
+#include <fts.h>
+#include <dirent.h>
 
 #include <err.h>
 #include <errno.h>
@@ -44,6 +46,8 @@
 
 static void	add_filename(const char *filename);
 static void	usage(void);
+static void	recurse_directory(char *const *paths, int r_flag, int l_flag, int big_h_flag);
+static acl_t	remove_invalid_inherit(const char *path, acl_t acl, int l_flag);
 
 static void
 add_filename(const char *filename)
@@ -62,34 +66,112 @@
 static void
 usage(void)
 {
-
-	fprintf(stderr, "usage: setfacl [-bdhkn] [-a position entries] "
+	fprintf(stderr, "usage: setfacl [-bdhkLnR] [-a position entries] "
 	    "[-m entries] [-M file] [-x entries] [-X file] [file ...]\n");
 	exit(1);
 }
 
+static void
+recurse_directory(char *const *paths, int r_flag, int l_flag, int big_h_flag)
+{
+	FTS *ftsp;
+	FTSENT *p, *chp;
+	int fts_options = FTS_NOCHDIR;
+	unsigned int i;
+	
+	fts_options |= (l_flag == 1) ? FTS_LOGICAL : FTS_PHYSICAL;
+	if (big_h_flag)
+		fts_options |= FTS_COMFOLLOW;
+	
+	if (r_flag)
+	{
+		ftsp = fts_open(paths, fts_options, NULL);
+		if (ftsp == NULL)
+			return;
+		
+		chp = fts_children(ftsp, 0);
+		if (chp == NULL)
+			return;
+		
+		while ((p = fts_read(ftsp)) != NULL) {
+			if (l_flag == 0 && p->fts_info & FTS_D)
+				continue;
+			else if (l_flag == 1 && p->fts_info & FTS_DP)
+				continue;
+			
+			add_filename(strdup(p->fts_path));
+		}
+		
+		fts_close(ftsp);
+	} else
+		for (i = 0; paths[i] != NULL; i++)
+			add_filename(paths[i]);
+}
+
+static acl_t
+remove_invalid_inherit(const char *path, acl_t acl, int l_flag)
+{
+	acl_t acl_new;
+	int acl_brand;
+	acl_entry_t entry;
+	int entry_id;
+	acl_flagset_t flagset;
+	struct stat sb;
+	
+	acl_get_brand_np(acl, &acl_brand);
+	if (acl_brand != ACL_BRAND_NFS4)
+		return acl;
+	
+	if (l_flag == 1) {
+		if (stat(path, &sb) == -1)
+			return acl;
+	} else
+		if (lstat(path, &sb) == -1)
+			return acl;
+	
+	if (S_ISDIR(sb.st_mode) != 0)
+		return acl;
+	
+	acl_new = acl_dup(acl);
+	
+	entry_id = ACL_FIRST_ENTRY;
+	while (acl_get_entry(acl_new, entry_id, &entry) == 1) {
+		entry_id = ACL_NEXT_ENTRY;
+		acl_get_flagset_np(entry, &flagset);
+		if (acl_get_flag_np(flagset, ACL_ENTRY_INHERIT_ONLY)) {
+			acl_delete_entry(acl_new, entry);
+			continue;
+		}
+		acl_delete_flag_np(flagset, ACL_ENTRY_FILE_INHERIT | ACL_ENTRY_DIRECTORY_INHERIT | ACL_ENTRY_NO_PROPAGATE_INHERIT);
+	}
+	
+	return acl_new;
+}
+
 int
 main(int argc, char *argv[])
 {
-	acl_t acl;
+	acl_t acl, acl_backup;
 	acl_type_t acl_type;
 	char filename[PATH_MAX];
-	int local_error, carried_error, ch, i, entry_number, ret;
-	int h_flag;
+	int local_error, carried_error, ch, entry_number, ret;
+	int h_flag, r_flag, l_flag, big_h_flag;
 	struct sf_file *file;
 	struct sf_entry *entry;
-	const char *fn_dup;
+	char *fn_dup;
 	char *end;
+	char **files=NULL;
+	unsigned int numfiles=0;
 	struct stat sb;
 
 	acl_type = ACL_TYPE_ACCESS;
 	carried_error = local_error = 0;
-	h_flag = have_mask = have_stdin = n_flag = need_mask = 0;
+	h_flag = have_mask = have_stdin = n_flag = need_mask = r_flag = l_flag = big_h_flag = 0;
 
 	TAILQ_INIT(&entrylist);
 	TAILQ_INIT(&filelist);
 
-	while ((ch = getopt(argc, argv, "M:X:a:bdhkm:nx:")) != -1)
+	while ((ch = getopt(argc, argv, "HLRM:X:a:bdhkm:nx:")) != -1)
 		switch(ch) {
 		case 'M':
 			entry = zmalloc(sizeof(struct sf_entry));
@@ -167,6 +249,15 @@
 			}
 			TAILQ_INSERT_TAIL(&entrylist, entry, next);
 			break;
+		case 'R':
+			r_flag = 1;
+			break;
+		case 'L':
+			l_flag = 1;
+			break;
+		case 'H':
+			big_h_flag = 1;
+			break;
 		default:
 			usage();
 			break;
@@ -189,11 +280,18 @@
 			fn_dup = strdup(filename);
 			if (fn_dup == NULL)
 				err(1, "strdup() failed");
-			add_filename(fn_dup);
+			files = realloc(files, ++numfiles * sizeof(char **));
+			if (files == NULL)
+				err(1, "realloc() failed");
+			files[numfiles-1] = (char *)fn_dup;
 		}
+		
+		files = realloc(files, ++numfiles * sizeof(char **));
+		files[numfiles-1] = NULL;
 	} else
-		for (i = 0; i < argc; i++)
-			add_filename(argv[i]);
+		files = argv;
+	
+	recurse_directory(files, r_flag, l_flag, big_h_flag);
 
 	/* cycle through each file */
 	TAILQ_FOREACH(file, &filelist, next) {
@@ -201,14 +299,12 @@
 
 		if (stat(file->filename, &sb) == -1) {
 			warn("%s: stat() failed", file->filename);
-			carried_error++;
 			continue;
 		}
 
 		if (acl_type == ACL_TYPE_DEFAULT && S_ISDIR(sb.st_mode) == 0) {
 			warnx("%s: default ACL may only be set on a directory",
 			    file->filename);
-			carried_error++;
 			continue;
 		}
 
@@ -220,7 +316,6 @@
 			if (acl_type == ACL_TYPE_DEFAULT) {
 				warnx("%s: there are no default entries "
 			           "in NFSv4 ACLs", file->filename);
-				carried_error++;
 				continue;
 			}
 			acl_type = ACL_TYPE_NFS4;
@@ -243,7 +338,6 @@
 			else
 				warn("%s: acl_get_file() failed",
 				    file->filename);
-			carried_error++;
 			continue;
 		}
 
@@ -254,12 +348,24 @@
 
 			switch(entry->op) {
 			case OP_ADD_ACL:
+				acl_backup = entry->acl;
+				entry->acl = remove_invalid_inherit(file->filename, entry->acl, l_flag);
 				local_error += add_acl(entry->acl,
 				    entry->entry_number, &acl, file->filename);
+				if (entry->acl != acl_backup) {
+					acl_free(entry->acl);
+					entry->acl = acl_backup;
+				}
 				break;
 			case OP_MERGE_ACL:
+				acl_backup = entry->acl;
+				entry->acl = remove_invalid_inherit(file->filename, entry->acl, l_flag);
 				local_error += merge_acl(entry->acl, &acl,
 				    file->filename);
+				if (entry->acl != acl_backup) {
+					acl_free(entry->acl);
+					entry->acl = acl_backup;
+				}
 				need_mask = 1;
 				break;
 			case OP_REMOVE_EXT:
@@ -267,20 +373,20 @@
 				need_mask = 0;
 				break;
 			case OP_REMOVE_DEF:
-				if (acl_type == ACL_TYPE_NFS4) {
-					warnx("%s: there are no default entries in NFSv4 ACLs; "
-					    "cannot remove", file->filename);
-					local_error++;
-					break;
+				if (acl_type != ACL_TYPE_NFS4) {
+					if (acl_delete_def_file(file->filename) == -1) {
+						warn("%s: acl_delete_def_file() failed",
+							file->filename);
+						local_error++;
+					}
+					if (acl_type == ACL_TYPE_DEFAULT)
+						local_error += remove_default(&acl,
+							file->filename);
+				} else {
+					/* FreeBSD does not support a zero amount of ACL entries like Solaris, give owner@ full permissions */
+					acl_free(acl);
+					acl = acl_from_text("owner@:full_set::allow");
 				}
-				if (acl_delete_def_file(file->filename) == -1) {
-					warn("%s: acl_delete_def_file() failed",
-					    file->filename);
-					local_error++;
-				}
-				if (acl_type == ACL_TYPE_DEFAULT)
-					local_error += remove_default(&acl,
-					    file->filename);
 				need_mask = 0;
 				break;
 			case OP_REMOVE_ACL:
